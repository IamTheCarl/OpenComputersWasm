buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "${project.mc_version}-${project.mod_version}"
group = "com.i_am_the_carl.oc_wasm"
archivesBaseName = "oc_wasm"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

// Set gradle to use java 8 and not 11.

minecraft {
    version = "1.12.2-14.23.5.2847"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171003"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    maven { 
        url = "http://maven.cil.li/"
	}
	maven {
        name = "JEI"
        url = "http://dvs1.progwml6.com/files/maven"
	}
}

dependencies {
    deobfCompile "li.cil.oc:OpenComputers:MC${project.mc_version}-${project.opencomputers_version}"
    deobfCompile "mezz.jei:jei_${project.mc_version}:${project.jei_version}"
}

compileJava {
    options.compilerArgs += ['-h', "${buildDir}/headers"]
}

task buildNativeLibraries {

    // Build Linux
    if ("${project.build_linux}" == "true") {
        exec {
            commandLine 'cargo', 'build', '--target', 'x86_64-unknown-linux-gnu', '--release'
        }
    }

    // Build Windows
    if ("${project.build_windows}" == "true") {
        exec {
            commandLine 'cargo', 'build', '--target', 'x86_64-pc-windows-gnu', '--release'
        }
    }

    // Build Mac
    if ("${project.build_macos}" == "true") {
        exec {
            environment 'CC', 'o64-clang'
            environment 'CXX', 'o64-clang++'
            commandLine 'cargo', 'build', '--target', 'x86_64-apple-darwin', '--release'
        }
    }

    // Copy into resources folder so it will end up in jar file.
    copy {
        from file("target/x86_64-unknown-linux-gnu/release/libwasm_interpreter.so")
        from file("target/x86_64-pc-windows-gnu/release/wasm_interpreter.dll")
        from file("target/x86_64-apple-darwin/release/libwasm_interpreter.dylib")
        into file("src/main/resources/lib")
    }

    // Copy into run folder so it we can test with it.
    copy {
        from file("target/x86_64-unknown-linux-gnu/release/libwasm_interpreter.so")
        from file("target/x86_64-pc-windows-gnu/release/wasm_interpreter.dll")
        from file("target/x86_64-apple-darwin/release/libwasm_interpreter.dylib")
        into file("run/natives")
    }
}

// Make sure we always build the native libraries.
rootProject.tasks.getByName('build').dependsOn buildNativeLibraries
rootProject.tasks.getByName('runClient').dependsOn buildNativeLibraries
rootProject.tasks.getByName('runServer').dependsOn buildNativeLibraries

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
